import React, { useState } from 'react';
import { registerUser } from './api'; // Import the registerUser API call

const Register = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [walletId, setWalletId] = useState('');  // Wallet ID can be generated by the backend
  const [balance, setBalance] = useState(0.0);  // Initial balance
  const [role, setRole] = useState('USER');  // Role (USER or ADMIN)
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState(null);  // Error state for form validation or API call
  const [success, setSuccess] = useState(false);  // Success message after registration

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic client-side validation
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    const userData = { name, email, phoneNumber, walletId, balance, role, password };

    try {
      const response = await registerUser(userData); // Call the API to register the user
      console.log('User registered successfully:', response);
      setSuccess(true);  // Show success message
      setError(null);  // Clear any previous error
    } catch (error) {
      console.error('Error registering user:', error);
      setError('Registration failed. Please try again.'); // Show error message
      setSuccess(false);
    }
  };

  return (
    <div style={styles.container}>
      <h2 style={styles.header}>Register</h2>
      <form onSubmit={handleSubmit} style={styles.form}>
        <div style={styles.inputGroup}>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Name:</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              style={styles.input}
            />
          </div>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Email:</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              style={styles.input}
            />
          </div>
        </div>
        <div style={styles.inputGroup}>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Phone Number:</label>
            <input
              type="text"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              required
              style={styles.input}
            />
          </div>
          
        </div>
        <div style={styles.inputGroup}>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Balance:</label>
            <input
              type="number"
              value={balance}
              onChange={(e) => setBalance(parseFloat(e.target.value))}
              style={styles.input}
            />
          </div>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Role:</label>
            <select value={role} onChange={(e) => setRole(e.target.value)} style={styles.input}>
              <option value="USER">USER</option>
              <option value="ADMIN">ADMIN</option>
            </select>
          </div>
        </div>
        <div style={styles.inputGroup}>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Password:</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              style={styles.input}
            />
          </div>
          <div style={styles.inputWrapper}>
            <label style={styles.label}>Confirm Password:</label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              style={styles.input}
            />
          </div>
        </div>
        <button type="submit" style={styles.button}>Submit</button>
      </form>

      {/* Display success or error message */}
      {success && <p style={styles.successMessage}>Registration successful!</p>}
      {error && <p style={styles.errorMessage}>{error}</p>}
    </div>
  );
};

// Styles
const styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    height: '100vh',
    backgroundColor: '#f4f4f4',
  },
  header: {
    marginBottom: '20px',
    fontSize: '24px',
    color: '#333',
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    width: '600px', // Adjust the width of the form
    background: '#fff',
    padding: '20px',
    borderRadius: '8px',
    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)',
  },
  label: {
    marginBottom: '10px',
    fontSize: '16px',
    color: '#555',
  },
  input: {
    padding: '10px',
    fontSize: '16px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    width: '100%',
    boxSizing: 'border-box',
  },
  button: {
    padding: '12px',
    backgroundColor: '#007bff',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '16px',
    transition: 'background-color 0.3s',
    width: '100%',
  },
  successMessage: {
    color: 'green',
    marginTop: '20px',
  },
  errorMessage: {
    color: 'red',
    marginTop: '20px',
  },
  inputGroup: {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '20px',
  },
  inputWrapper: {
    width: '48%', // Ensure the two inputs take up equal space
  },
};

export default Register;
